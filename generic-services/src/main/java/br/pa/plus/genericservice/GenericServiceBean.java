/*
 * This code was generated by CalangoMDA (puppy) for use within the Prodepa in their products.The calangoMDA was created by Thiago Soares (tfs.capanema
 * @ gmail.com)©CalangoDDA 2010
 */
package br.pa.plus.genericservice;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import br.gov.pa.muiraquita.converter.Converter;
import br.gov.pa.muiraquita.converter.annotations.DtoMapping;
import br.gov.pa.muiraquita.converter.engine.ConverterImpl;
import br.gov.pa.muiraquita.dto.AbstractDto;
import br.gov.pa.muiraquita.entity.AbstractEntity;
import br.gov.pa.muiraquita.exception.BusinessException;
import br.gov.pa.muiraquita.exception.SystemException;
import br.gov.pa.muiraquita.exception.control.HandlerAttachments;
import br.gov.pa.muiraquita.exception.internal.InternalException;
import br.gov.pa.muiraquita.exception.security.InvalidPassportException;
import br.gov.pa.muiraquita.reflection.Property;


/**
 * TODO Fazer:
 *      Tratar todos os tipos de excessão e encapsular na arquitetura. Ex: JDBCExc  OK
 *      Melhorar os generic para, entre outros, evitar casts
 *      Fazer autorizacao no CA
 *      Fazer as validacoes de Unique
 * @author thiago
 *
 */

public class GenericServiceBean {

	
  private EntityManager em;
	
  private static Converter converter;
  private static ExceptionTreatment treatment;
  
  static {
    converter = new ConverterImpl();
    treatment = new ExceptionTreatment(); 
  }
  
  public GenericServiceBean(EntityManager em) {
    super();
    this.em = em;
  }

  public <T extends AbstractDto> T create(T dto) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    Class<? extends AbstractEntity> entityClass = getSingleMappedEntityClass(dto);
    
    return (T) create(dto, entityClass);
  }

  public <T extends AbstractDto> T create(T dto, Class<? extends AbstractEntity> entityClass) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      //buscarUsuarioSessao(loteDto.getPassaporte());
      
      AbstractEntity entity = getEntity(dto, entityClass);
  
      validateInclude(entity);
      
      em.persist(entity);
  
      return (T) getDto(entity, dto.getClass());
    } catch (Throwable e) {
      treatment.treat(e);
      return null;
    }
  }

  public <T extends AbstractDto> T update(T dto) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    Class<? extends AbstractEntity> entityClass = getSingleMappedEntityClass(dto);
    
    return update(dto, entityClass);
  }

  public <T extends AbstractDto> T update(T dto, Class<? extends AbstractEntity> entityClass) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      AbstractEntity entity = em.find(entityClass, getIdDto(dto)); 
      
      getMergeEntity(entity, dto);
  
      validateUpdate(entity);
      
      em.merge(entity);
  
      return (T) getDto(entity, dto.getClass());
    } catch (Throwable e) {
      treatment.treat(e);
      return null;
    }
  }

  public void delete(Class<? extends AbstractEntity> entityClass, Object id) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      
      AbstractEntity entity = em.find(entityClass, id); //
      
      validateDelete(entity);
  
      em.remove(entity);
    } catch (Throwable e) {
      treatment.treat(e);
    }
  }

  public <T extends AbstractDto> T findById(Class<? extends AbstractEntity> entityClass, Class<T> dtoReturnClass, Object id) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      AbstractEntity entity = em.find(entityClass, id);
      return (T) getDto(entity, dtoReturnClass);
    } catch (Throwable e) {
      treatment.treat(e);
      return null;
    }
  }

  public <T extends AbstractDto> List<T> findAll(Class<? extends AbstractEntity> entityClass, Class<T> dtoReturnClass) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      List<AbstractEntity> entities = em.createQuery("SELECT o FROM " + entityClass.getSimpleName() + " as o").setMaxResults(1000).getResultList();
      return (List<T>) getDtoList(entities, dtoReturnClass);
    } catch (Throwable e) {
      treatment.treat(e);
      return null;
    }
  }
  
  public <T extends AbstractEntity> List<T> findAll(Class<? extends AbstractEntity> entityClass) throws InvalidPassportException, BusinessException, SystemException, InternalException {
	    try {
	      List<AbstractEntity> entities = em.createQuery("SELECT o FROM " + entityClass.getSimpleName() + " as o").setMaxResults(1000).getResultList();
	      return (List<T>) entities;
	    } catch (Throwable e) {
	      treatment.treat(e);
	      return null;
	    }
	  }
  
  
  public <T extends AbstractEntity> List<T> findAll(Class<? extends AbstractEntity> entityClass, Integer campoOrdenacao) throws InvalidPassportException, BusinessException, SystemException, InternalException {
	    try {
	      List<AbstractEntity> entities = em.createQuery("SELECT o FROM " + entityClass.getSimpleName() + " as o ORDER BY " + campoOrdenacao).setMaxResults(1000).getResultList();
	      return (List<T>) entities;
	    } catch (Throwable e) {
	      treatment.treat(e);
	      return null;
	    }
	  }

  public <T extends AbstractDto> List<T> findByQuery(Class<? extends AbstractEntity> entityClass, Class<T> dtoReturnClass, String srtQuery, Object...  params) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      
      List<AbstractEntity> entities = null;
      
      Query query = em.createQuery(srtQuery);
      
      for (int i = 0; i < params.length; i++) {
        query.setParameter(i+1, params[i]);
      }
      return query.getResultList();
    } catch (Throwable e) {
      treatment.treat(e);
      return null;
    }
  }
  
  public <T extends AbstractDto> List<T> findByQuery(Class<? extends AbstractEntity> entityClass, Class<T> dtoReturnClass, String srtQuery, Map<String, Object>  params) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    try {
      
      List<AbstractEntity> entities = null;
      
      Query query = em.createQuery(srtQuery);
      
      for (String key : params.keySet()) {
        query.setParameter(key, params.get(key));
      }
      return (List<T>) query.getResultList();
    } catch (Throwable e) {
      treatment.treat(e);
      return null;
    }
  }

  @SuppressWarnings("unchecked")
  public <T extends AbstractDto> List<T> findByParameters(Class<? extends AbstractEntity> entityClass, Class<T> dtoReturnClass, AbstractDto dtoSearch) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    
    Map<String, BeanProperty> props = QueryUtil.getNotNullValues(entityClass, dtoSearch);

    String strQuery = QueryUtil.getQueryDefault(entityClass, props, dtoSearch);
    
    
    Query query = em.createQuery(strQuery);
    
    QueryUtil.setParemeters(query, props);
    
    return query.getResultList();
  }
  
  @SuppressWarnings("unchecked")
  public <T extends AbstractEntity> List<T> findByParameters(Class<? extends AbstractEntity> entityClass, AbstractDto dtoSearch) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    
    Map<String, BeanProperty> props = QueryUtil.getNotNullValues(entityClass, dtoSearch);

    String strQuery = QueryUtil.getQueryDefault(entityClass, props, dtoSearch);
    
    
    Query query = em.createQuery(strQuery);
    
    QueryUtil.setParemeters(query, props);
    
    return query.getResultList();
  }

  @SuppressWarnings("unchecked")
  public <T extends AbstractEntity> List<T> findByParameters(Class<? extends AbstractEntity> entityClass, AbstractDto dtoSearch, Integer campoOrdenacao) throws InvalidPassportException, BusinessException, SystemException, InternalException {
    
    Map<String, BeanProperty> props = QueryUtil.getNotNullValues(entityClass, dtoSearch);

    String strQuery = QueryUtil.getQueryDefault(entityClass, props, dtoSearch, campoOrdenacao);
    
    Query query = em.createQuery(strQuery);
    
    QueryUtil.setParemeters(query, props);
    
    return query.getResultList();
  }
  
  /*
   * Validations
   */
  private void validateInclude(AbstractEntity entity) throws BusinessException {
    System.out.println("TO VALIDATION");
    HandlerAttachments.levantarErrosNegocioAnotado(entity, "TODO");
  }
  
  private void validateUpdate(AbstractEntity entity) throws BusinessException {
    HandlerAttachments.levantarErrosNegocioAnotado(entity, "");
  }
  
  private void validateDelete(AbstractEntity entity) {
    
  }
  
  /*
   * Converters
   */
  
  private AbstractEntity getEntity(AbstractDto dto, Class<? extends AbstractEntity> entityClass) throws BusinessException {
    return converter.getEntity(dto, entityClass);
  }
  
  private AbstractDto getDto(AbstractEntity entity, Class<? extends AbstractDto> dtoClass) throws BusinessException {
    return converter.getDto(dtoClass, entity);
  }
  
  private AbstractEntity getMergeEntity(AbstractEntity entity, AbstractDto dto) throws BusinessException {
    return converter.updateEntity(dto, entity);
  }
  
  private List<AbstractDto> getDtoList(List<AbstractEntity> entities, Class<? extends AbstractDto> dtoClass) throws BusinessException {
    List<AbstractDto> dtoList = new ArrayList<AbstractDto>();
    
    for (AbstractEntity abstractEntity : entities) {
      dtoList.add(getDto(abstractEntity, dtoClass));
    }
    
    return dtoList;
  }
  
  /*
   * UtilsgetSingleMappedEntityClass
   */
  private Object getIdDto(AbstractDto dto) {
    try {
      return Property.getFieldValue(dto, "id");
      
    } catch (Exception e) {
      //TODO Criar outra forma. Talvez uma annot
      
      Field[] fields = dto.getClass().getDeclaredFields();
      for (Field field : fields) {
        if(field.isAnnotationPresent(Id.class)) {
          return Property.getFieldValue(dto, field.getName());
        }
      }
      return null; //TODO ou excessao
    }
  }
  
  private Class<? extends AbstractEntity> getSingleMappedEntityClass(AbstractDto dto) {
    
    if(dto.getClass().isAnnotationPresent(DtoMapping.class)) {
      DtoMapping ann = dto.getClass().getAnnotation(DtoMapping.class);
      if(ann.entityClass().compareTo("br.gov.pa.muiraquita.entity.AbstractEntity") == 0) {
        try {
          return (Class<? extends AbstractEntity>) Class.forName(ann.entityClass());
        } catch (ClassNotFoundException e) {
          e.printStackTrace();
          //TODO 
        }
      } else {
        //TODO exception Não é simples mapeado
      }
      
    }
    
    return null;
  }
  
}
